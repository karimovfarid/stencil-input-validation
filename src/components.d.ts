/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CustomInput {
        /**
          * Takes the error message of the input.
         */
        "error": string;
        /**
          * Takes the id of the input.
         */
        "inputId": string;
        /**
          * When used in forms, it checks whether the form has been submitted or not.
         */
        "isSubmitted": boolean;
        /**
          * Checks final state of validation.
         */
        "isValid": boolean;
        /**
          * Takes the lable of the input.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Determines the size of the input.
         */
        "size": "small" | "medium" | "large";
        /**
          * Takes the type of the input (url, text, etc).
         */
        "type": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user.
         */
        "validation": string;
        /**
          * Takes the value of the input.
         */
        "value": string;
    }
}
export interface CustomInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomInputElement;
}
declare global {
    interface HTMLCustomInputElement extends Components.CustomInput, HTMLStencilElement {
    }
    var HTMLCustomInputElement: {
        prototype: HTMLCustomInputElement;
        new (): HTMLCustomInputElement;
    };
    interface HTMLElementTagNameMap {
        "custom-input": HTMLCustomInputElement;
    }
}
declare namespace LocalJSX {
    interface CustomInput {
        /**
          * Takes the error message of the input.
         */
        "error"?: string;
        /**
          * Takes the id of the input.
         */
        "inputId"?: string;
        /**
          * When used in forms, it checks whether the form has been submitted or not.
         */
        "isSubmitted"?: boolean;
        /**
          * Checks final state of validation.
         */
        "isValid"?: boolean;
        /**
          * Takes the lable of the input.
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onChangeInput"?: (event: CustomInputCustomEvent<string>) => void;
        /**
          * Determines the size of the input.
         */
        "size"?: "small" | "medium" | "large";
        /**
          * Takes the type of the input (url, text, etc).
         */
        "type"?: string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user.
         */
        "validation"?: string;
        /**
          * Takes the value of the input.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "custom-input": CustomInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-input": LocalJSX.CustomInput & JSXBase.HTMLAttributes<HTMLCustomInputElement>;
        }
    }
}
